// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // ALU
    // Counter - PC
    // Registers - A and D
    DMux(in=true, sel=instruction[15], a=typeA, b=typeC); // determine i-type
    Mux4Way16(a=false, b=outAlu, c=instruction, d=instruction, // determine A input
            sel[1]=typeA, sel[0]=instruction[5], out=inA);
    Or(a=typeA, b=instruction[5], out=loadA); // load A?
    And(a=typeC, b=instruction[4], out=loadD); // load D?
    ARegister(in=inA, load=loadA, out=outA, out[0..14]=addressM);
    DRegister(in=outAlu, load=loadD, out=outD);
    Mux16(a=outA, b=inM, sel=instruction[12], out=outAluMux); // choose ALU second i/p src
    ALU(x=outD, y=outAluMux, zx=instruction[11], nx=instruction[10], 
        zy=instruction[9], ny=instruction[8], f=instruction[7], 
        no=instruction[6], out=outAlu, out=outM, zr=alueq, ng=alult);
    And(a=typeC, b=instruction[3], out=writeM); // write to M?
    /** jump conditions */
    DMux8Way(in=typeC, sel[0]=instruction[0], sel[1]=instruction[1],
            sel[2]=instruction[2], b=jgt, c=jeq, d=jge, e=jlt, f=jne, g=jle, h=jmp);
    Not(in=alueq, out=alune);
    Not(in=alult, out=aluge);
    Or(a=alueq, b=alult, out=alule);
    And(a=alune, b=aluge, out=alugt);
    And(a=jgt, b=alugt, out=j1);
    And(a=jeq, b=alueq, out=j2);
    And(a=jge, b=aluge, out=j3);
    And(a=jlt, b=alult, out=j4);
    And(a=jne, b=alune, out=j5);
    And(a=jle, b=alule, out=j6);
    Or8Way(in[0]=false, in[1]=j1, in[2]=j2, in[3]=j3, in[4]=j4, in[5]=j5, in[6]=j6,
        in[7]=jmp, out=jump); // to jump or not to jump
    Not(in=jump, out=inc);  // increment otherwise
    PC(in=outA, load=jump, inc=inc, reset=reset, out[0..14]=pc);
}